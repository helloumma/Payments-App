import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import axios from "axios";
import { loadStripe } from "@stripe/stripe-js";
import { GetServerSideProps } from "next";
import Stripe from "stripe";
import { createCheckoutSession } from "next-stripe/client";
import { checkout } from "../checkout";

// rome-ignore lint/suspicious/noEmptyInterface: <explanation>
interface getPrice extends Stripe.Price {
  product: Stripe.Product;
}

interface props {
  prices: getPrice[];
}

const redirecting = () => {
  console.log("disable");
};

/*const redirectToCheckout = async () => {
  const {
    data: { id },
  } = await axios.post("/api/checkout_sessions", {
    items: Object.entries(cartDetails).map,
  });
};
*/
export default function Home({ prices }: props) {
  const handleClick = async (priceId: string) => {
    const session = await createCheckoutSession({
      success_url: window.location.href,
      cancel_url: window.location.href,
      line_itens: [
        {
          price: priceId,
          quantity: 1,
        },
      ],
      payment_method_types: ["card"],
      mode: "payment",
    });
    const stripe = await loadStripe(process.env.NEXT_PUBLIC_API_KEY);
    if (stripe) {
      stripe.redirectToCheckout({ sessionId: session.id });
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>app</div>

      {prices.map((price) => (
        <>
          {price.product.name}
          <button key={price.id} onClick={() => handleClick(price.id)}>
            Â£{((price.unit_amount as number) / 100).toFixed(2)}
          </button>
        </>
      ))}
      <button
        onClick={() => {
          checkout({
            lineItems: [
              {
                price: "price_1MtWYoCs2iAodiD7edm8y99m",
                quantity: 1,
              },
            ],
          });
        }}
      >
        BUY!
      </button>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
    apiVersion: "2022-08-01",
  });
  const prices = await stripe.prices.list({
    active: true,
    limit: 10,
    expand: ["data.product"],
  });
  console.log(prices);
  return { props: { prices: prices.data } };
};
